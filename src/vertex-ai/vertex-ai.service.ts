import { VertexAI } from '@google-cloud/vertexai';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { Firestore } from 'firebase-admin/firestore';
import { UserInfoDto } from 'src/common/dtos/user.dtos';

@Injectable()
export class VertexAIService {
    private readonly vertexAI: VertexAI;
    private readonly generativeTextModel: any;
    private readonly logger = new Logger(VertexAIService.name);

    constructor(@Inject('FIRESTORE') private readonly firestore: Firestore) {
        const project = 'contract-central-c710c';
        const location = 'europe-west1';
        const textModel = 'gemini-1.5-pro';
        this.vertexAI = new VertexAI({ project, location });
        this.generativeTextModel = this.vertexAI.getGenerativeModel({
            model: textModel,
        });
    }

    async generateTextContent(uid: string, prompt: string, bucketUrls: string[], userInfo: UserInfoDto): Promise<any> {
        const displayName =
            userInfo.firstname && userInfo.lastname ? `${userInfo.firstname} ${userInfo.lastname}` : "l'utilisateur";

        const reasoningPrompt = getReasoningPrompt(displayName);
        const finalDecisionPrompt = getFinalDecisionPrompt(displayName);

        const fileParts = bucketUrls.map((url) => ({
            fileData: {
                fileUri: 'gs://contract-central-c710c.firebasestorage.app/' + url,
                mimeType: 'application/pdf',
            },
        }));

        const textPart = {
            text: `INFO ${displayName}: ${JSON.stringify(userInfo)} REQUEST ${displayName}: ${prompt}`,
        };

        let reasoningText = 'No reasoning generated.';
        let docRef: FirebaseFirestore.DocumentReference;

        try {
            this.logger.log(`Generating structured reasoning for user: ${uid}`);

            const reasoningRequest = {
                contents: [
                    {
                        role: 'user',
                        parts: [{ text: reasoningPrompt }, textPart, ...fileParts],
                    },
                ],
            };

            const reasoningResult = await this.generativeTextModel.generateContent(reasoningRequest);

            reasoningText =
                reasoningResult?.response?.candidates?.[0]?.content?.parts?.[0]?.text || 'No reasoning available.';

            this.logger.log(`Structured reasoning successfully generated for ${uid}`);

            docRef = await this.firestore
                .collection('logs')
                .doc(uid)
                .collection('ai_interactions')
                .add({
                    prompt,
                    reasoning: reasoningText,
                    finalDecision: null,
                    vertexResponse: {
                        responseId: reasoningResult?.response?.responseId || null,
                        promptTokens: reasoningResult?.response?.usageMetadata?.promptTokenCount || null,
                        totalTokens: reasoningResult?.response?.usageMetadata?.totalTokenCount || null,
                        modelVersion: reasoningResult?.response?.modelVersion || null,
                    },
                    createdAt: new Date().toISOString(),
                    deletedAt: null,
                });

            this.logger.log(`Saved reasoning to Firestore for user ${uid}`);
        } catch (error) {
            this.logger.error(`Error during reasoning generation for ${uid}: ${error.message}`, error.stack);
            throw error;
        }

        try {
            this.logger.log(`Generating final decision for ${uid}`);

            const decisionRequest = {
                contents: [
                    {
                        role: 'user',
                        parts: [{ text: finalDecisionPrompt }, { text: `### Structured reasoning:\n${reasoningText}` }],
                    },
                ],
            };

            const result = await this.generativeTextModel.generateContent(decisionRequest);

            const finalText = result?.response?.candidates?.[0]?.content?.parts?.[0]?.text || 'No decision available.';

            this.logger.log(`Final decision successfully generated for ${uid}`);

            if (docRef) {
                await docRef.update({
                    finalDecision: finalText,
                    finalVertexResponse: {
                        responseId: result?.response?.responseId || null,
                        promptTokens: result?.response?.usageMetadata?.promptTokenCount || null,
                        totalTokens: result?.response?.usageMetadata?.totalTokenCount || null,
                        modelVersion: result?.response?.modelVersion || null,
                    },
                });

                this.logger.log(`Updated Firestore log with final decision for user ${uid}`);
            }

            return result;
        } catch (error) {
            this.logger.error(`Error during final decision generation for ${uid}: ${error.message}`, error.stack);
            throw error;
        }
    }
}

function getReasoningPrompt(userName: string): string {
    return `
Vous √™tes un expert en gestion de contrats et en conseil en assurances.
Votre but: minimiser les frais sans forc√©ment chercher √† maximiser la couverture.
Le but est de s'assurer de rester dans la l√©galit√©, sans souscrire √† des contrats inutiles.
Votre mission est d'analyser la situation de **${userName}** en fonction de ses informations et de ses contrats sign√©s.

### Objectif :
- Construire un raisonnement structur√© pour comprendre le contexte de **${userName}**.

Pour chaque contrat vous drevez r√©pondre aux questions suivantes :
- Quels sont les risques couverts ?
- Quels sont les plafonds et exclusions ?
- Y a-t-il un chevauchement avec un autre contrat ou bien le contrat dont parle ${userName} ?
- Quels sont les risques non couverts ?
- Quel est le co√ªt (si connu) de cette couverture ?
- Identifier les garanties manquantes, les doublons, les co√ªts excessifs ou les contrats peu pertinent (exemple, assurance pour les m√©tiers √† risque si ${userName} est d√©veloppeur).
- Si l'utilisateur est **probablement couvert**, pr√©ciser : "**Couverture existante, v√©rification recommand√©e.**"
- Si une assurance **est n√©cessaire**, pr√©ciser : "**Pas couvert, contrat recommand√©.**"
- Si l'assurance **est optionnelle**, pr√©ciser : "**Couverture partielle, √† √©valuer selon votre tol√©rance au risque.**"

### Format de r√©ponse :
- **Synth√®se des contrats** : Liste des contrats fournis et leur couverture.
- **Analyse des besoins** : √âvaluation des risques et besoins de **${userName}**.
- **Comparaison** : √âvaluer si un nouveau contrat est n√©cessaire ou redondant.
- **Recommandation pr√©liminaire** : "Il semble n√©cessaire de souscrire", "Pas besoin de souscrire", "√Ä v√©rifier plus en d√©tail".
`;
}

function getFinalDecisionPrompt(userName: string): string {
    return `
Sur la base du raisonnement structur√© ci-dessous, fournissez une **r√©ponse claire, actionnable et directement adress√©e √†** ${userName}.
Votre objectif est de donner une conclusion pr√©cise et de recommander imm√©diatement une action.

### Contexte :
- **Les analyses contractuelles ont d√©j√† √©t√© faites** et doivent √™tre consid√©r√©es comme **acquises**.
- **L'objectif est d'offrir une recommandation imm√©diate** √† ${userName}, avec **un plan d'action clair**.
- **Priv√©l√©gier les √©conomies et le minimum d'overhead possible quant √† la gestion des contrats.**

### Format attendu :
**Synth√®se rapide** : Expliquer en **2-3 lignes** la situation actuelle de **${userName}**.
**Recommandation imm√©diate** :
   - "**Souscription recommand√©e**"
   - "**D√©j√† couvert, aucun contrat n√©cessaire**"
   - "**Pas couvert, contrat n√©cessaire, contrat optionnel**"
   - "**V√©rification compl√©mentaire n√©cessaire (en ultime recours, de pr√©f√©rence donner un avis √©clair√©)**"
**Justification** : Expliquez la d√©cision en mettant en √©vidence **les garanties existantes et les √©ventuels manques**.
**Actions imm√©diates** : Que doit faire **${userName}** ?
   - **R√©silier un contrat existant ?**
   - **Comparer des offres ?**
   - **V√©rifier une clause sp√©cifique ?**

‚ö† **Consignes importantes :**
- **Soyez direct, concis et professionnel.**
- **Utilisez le vouvoiement.**
- **√âvitez les r√©ponses neutres ou floues** : l'utilisateur attend une action concr√®te.
- **Ne faites pas de supposition** sur une ren√©gociation de contrat.
- **Ce n'est pas une conversation, il n'y a qu'une seule interaction entre ${userName} et vous**.

Vous vous adressez directement √† **${userName}**, veillez √† **rendre la r√©ponse fluide et naturelle**.

### Format de r√©ponse final:
üìå Synth√®se rapide (max 2 phrases)
‚úÖ Recommandation imm√©diate (ex: "D√©j√† couvert, aucun contrat n√©cessaire")
üìú Justification d√©taill√©e (pr√©cisant les documents √† v√©rifier)
üìå Actions imm√©diates (3 √† 4 √©tapes concr√®tes)
`;
}
